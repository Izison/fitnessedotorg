!2 Bugs

----
!2 Stories
|remove ModificationTime from properties.xml, and use the modification date of the content.txt (or properties.xml) file instead.|
|Say you had 20 FitNesse tests (pages) failing due to code change. Any easy way to turn 20 off and leave 200 running?|
|when i refator a page that is symbolically linked to another page the page that is symbolically linked gets deleted. is there anything that can be done to prevent refactoring on pages that are symbolically to other pages?|
|Being able to manipulate the subwiki visually in a tree control|
|Allowing bulk operations (like removing the WikiImport attribute in all sub-pages)|
|>PluginDownloadAndInstallationManager|
|>PageAndTestTagging|
|>CreateChildPageButton|
|>TestStatusWidget|
|>RequirementsWidget|
|>WysiwygEditor|
|Is there a way to get the Fitnesse test runner to automatically expand a collapsed section that contains a table with at least one failure?|
|As a developer submitting a build to the CI tool I need to know that a test is failing as soon as it fails and before the suite is over|
|As a developer submitting a build the CI tool I need to know everything I can to diagnose why a test failed immediately after it has failed and before I can see the entire suite result page.|
|As a developer having submitted a build to the CI tool, I need to be able to see immediately the results of a test from the TestRunner (with 500 tests, it takes 3-4mn for a browser to render the whole page).|
|As a developer/tester I need to find what tests are not marked "complete" (i.e. are not part of the "complete" suite) and not committed.|
|As a developer/tester I need to know which tests take the most time and what rows take the most time in each test.|
|>ChangeSlimFunctionSignatures|
|Exception in Fixture should cancel whole table.|
|Delete Page confirmation should be javascript.|
|A tree-view pane that shows pages.  Click on a page and an edit window pops up in a frame to the right.  Filter the tree-view with regular expression matching on title or content.|
|going away from folder-based organisation into a file-based organisation, so that fitnesse functions such as test refactoring can be used without causing chaos in svn and cvs.|
|a rich extension model so that  people can hook into different events. eg start and roll back transactions before and after each test without actually coding that in test pages.|
|multiversioning. this is what i really like about green pepper. that tool has two versions of each test: implemented and in-progress. the implemented version is used for regression testing, in-progress is used for current iteration development. at the moment we keep these as two separate tests and then have some heuristics which one to ignore when it fails|
|test tags: assign free-form keywords to tests and then filter by those keywords for search and/or run. similar to what rick is doing with fitlibrary suitefixture. mike started to implement something in the .net test runner, but i think that this functionality is genrerally useful and should be part of the test management tool|
|Test Executor: i don't agree with the idea to run tests inside fitnesse, and i'd go even further and extract the test rendering/execution part from fitnesse completely. that way, fitnesse can be used as a ui to run tests, but we could easily run tests from eclipse/idea etc. this is what i like about concordion and jbehave. i don't have to run a separate server on the machine to execute tests. i find a lot of value in a wiki frontend for BAs, but i think that developers won't mind too much having to edit files by hand; so if we could make something that renders tests correctly (symlinks, includes, variables...) and sends it off to the test execution tool inside the ide, that would help a lot to troubleshoot tests.|
|stoping tests and controlling fitserver/slim processes from fitnesse would be great. fitserver often hangs in the background if people just press stop on the browser window and this causes lots of problems with transactions etc|
|metadata test configuration to be extracted from the tests (imports, namespaces, future extension hooks etc -- all technical/infrastructural parts should ideally be in an external config file so that they can be reused across the whole suite without actually appearing in the test page)|
|testers often ask me for a way to export the results of an overnight test suite run in a pdf or something similar that they can print off or|
|to compare with tomorrow's test suite run.|
|smart search/replace that understands fixture graceful naming. this is an idea that elisabeth hendrikson put forward during the second aa ftt tools workshop, suggesting that acceptance test refactoring integration is not really that important if people could quickly search/replace through the test suite.}|
|Replace REGEX parser with a real parser|
|improve rubyslim error messages, especially around fixture construction|
|Add plugin point for Slim Table comparators that will allow users to write comparators for dates, and other user types.|












